plugins {
    id 'java'
    id 'groovy' // Add this plugin to support Groovy
    id 'war'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springBootDependencyManagement}"
}

group = 'edu.csudh.lsu.revops'
version = getVersionFromGit()

def getVersionFromGit() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception ignored) {
        return "1.0-SNAPSHOT"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    mavenLocal()
    flatDir {
        dir rootProject.file('lib')
    }
    maven {
        url = uri("https://maven.pkg.github.com/Loker-Student-Union-Inc/csudh-lsu-cockroachdb-persistance")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME_GITHUB")
            password = project.findProperty("gpr.token") ?: System.getenv("TOKEN_GITHUB")
        }
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter'

    // Logback
    implementation 'org.springframework.boot:spring-boot-starter-logging'

    // GitHub package dependency
    implementation "edu.csudh.lsu.persistence:csudh-lsu-cockroachdb-persistance:${cockroachPersistenceVersion}"

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // PostgreSQL
    implementation 'org.postgresql:postgresql:42.6.0'

    // Spring Retry
    implementation group: 'org.springframework.retry', name: 'spring-retry', version: '2.0.8'

    // Spring AOP
    implementation group: 'org.springframework', name: 'spring-aop', version: '6.1.12'

    // Logback-Classic
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.7'

    // Development Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Provided Runtime
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.9'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}

bootWar {
    enabled = true
    archiveClassifier = 'boot'
}

war {
    enabled = true
    archiveClassifier = ''
}

def buildTimestamp = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'")

bootRun {
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

processResources {
    filesMatching('**/application.yml') {
        expand(buildTimestamp: buildTimestamp)
    }
}

processTestResources {
    filesMatching('**/application.yml') {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                "applicationVersion": project.version.toString(),
                "applicationBuildTimestamp": getDate()
        ])
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion '2.17.0'
        }
    }
}

def getDate() {
    return buildTimestamp
}
